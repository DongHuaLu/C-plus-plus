// 函数指正以及复杂定义
// 复杂定义以右左右左...的模式向外扩展

void* func(); // 表示定义一个函数,函数参数为空,返回值为void*
void (*funcPtr)(); // 定义一个函数指针 ,从变量名开始,往右为右括号,往左为指针,表明这个是一个指针类型,往右发现一个空的参数列表,往左发现一个void.

void* voidArr[10];

void** fun1(int){
    return voidArr;
};
void* (*(*fp1)(int)) = fun1; // 定义一个fp1,fp1是一个指针,指向一个int参数,返回一个指向void**的指针;

/* --------------------------------------------------------------------------------------------------*/

float func2_1(int){
    return 0.1f;
};
typedef float (*fp2_1)(int);
fp2_1 fp21 = func2_1;
fp2_1 func2_2(int,int,float){
    return &func2_1;
};
float (*(*fp2)(int,int,float))(int) = func2_2; // 定义一个fp2指针,指向一个(int,int,float)参数,并返回一个指向一个函数参数为(int),返回值为float的函数的指针;

/**-----------------------------------------------------------------------------------------------------***/

typedef double (*(*(*fp3)())[10])(); // 定义一个fp3指针,指向一个空参数,返回一个[10]个指向函数的指针数组的函数,这个函数指针数组中的指针类型是一个空参数,返回double类型的函数指针;
fp3 a; 

int main(){

}
